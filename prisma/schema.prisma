generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bot {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String      @unique
  avatarUrl    String?
  status       BotStatus   @default(Active)
  token        String /// @encrypted
  clientId     String /// @encrypted
  clientSecret String /// @encrypted
  community    Community   @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId  String      @unique
  permissions  BotRole[]
  servers      BotServer[]
  logs         Log[]
}

model BotRole {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  bot          Bot              @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId        String
  serverId     String
  serverRoleId String
  permissions  RolePermission[]

  @@unique([botId, serverId, serverRoleId])
}

model BotServer {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bot          Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId        String
  serverId     String
  enableSync   Boolean  @default(false)
  dryRun       Boolean  @default(true)
  mentionRoles Boolean  @default(false)
  mentionUsers Boolean  @default(false)
  verbose      Boolean  @default(false)
  adminRoles   String[]
  botChannel   String?

  @@unique([botId, serverId])
}

model Community {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  name        String
  avatarUrl   String?
  description String?
  websiteUrl  String?
  discordUrl  String?
  githubUrl   String?
  twitterUrl  String?
  telegramUrl String?
  enableSync  Boolean           @default(false)
  featured    Boolean           @default(false)
  members     CommunityMember[]
  roles       Role[]
  cluster     NetworkCluster
  bot         Bot?
  logs        Log[]
  teams       Team[]

  // TODO: Add relation to NetworkToken
  @@unique([name])
}

model CommunityMember {
  id          String                @id @default(cuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  role        CommunityRole
  community   Community             @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  roles       CommunityMemberRole[]
  teams       Team[]

  @@unique([communityId, userId])
}

model CommunityMemberRole {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  member    CommunityMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String
  role      Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
}

model Identity {
  id           String              @id @default(cuid())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  syncStarted  DateTime?
  syncEnded    DateTime?
  provider     IdentityProvider
  providerId   String
  name         String
  accessToken  String? /// @encrypted
  refreshToken String? /// @encrypted
  profile      Json?
  verified     Boolean             @default(false)
  owner        User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  challenges   IdentityChallenge[]
  logs         Log[]
  teams        Team[]

  @@unique([provider, providerId])
}

model IdentityChallenge {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  challenge  String           @unique
  signature  String?
  ip         String?
  userAgent  String
  blockhash  String?
  verified   Boolean          @default(false)
  identity   Identity         @relation(fields: [provider, providerId], references: [provider, providerId], onDelete: Cascade)
  provider   IdentityProvider
  providerId String
}

model Log {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  message            String
  data               Json?
  level              LogLevel
  relatedId          String?
  relatedType        LogRelatedType?
  community          Community?        @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId        String?
  identity           Identity?         @relation(fields: [identityProvider, identityProviderId], references: [provider, providerId], onDelete: Cascade)
  identityProvider   IdentityProvider?
  identityProviderId String?
  bot                Bot?              @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId              String?
  networkAsset       NetworkAsset?     @relation(fields: [networkAssetId], references: [id], onDelete: Cascade)
  networkAssetId     String?
  user               User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String?
  role               Role?             @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId             String?
}

model Network {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now()) @updatedAt
  cluster    NetworkCluster @unique
  type       NetworkType
  enableSync Boolean        @default(true)
  name       String         @unique
  endpoint   String
  assets     NetworkAsset[]
  tokens     NetworkToken[]
}

model NetworkAsset {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  network    Network          @relation(fields: [cluster], references: [cluster])
  cluster    NetworkCluster
  resolver   NetworkResolver
  type       NetworkTokenType
  account    String
  group      String?
  name       String
  symbol     String?
  balance    String?
  decimals   Int
  mint       String
  owner      String
  program    String?
  imageUrl   String?
  metadata   Json?
  attributes Json?
  logs       Log[]

  @@unique([account, cluster])
  @@index([cluster, owner, type])
  @@index([cluster, group, type])
}

model NetworkToken {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  network     Network          @relation(fields: [cluster], references: [cluster])
  cluster     NetworkCluster
  type        NetworkTokenType
  name        String
  account     String
  program     String
  vault       String?
  imageUrl    String?
  metadataUrl String?
  description String?
  symbol      String?
  raw         Json?
  conditions  RoleCondition[]

  @@unique([account, cluster])
}

model Role {
  id          String                @id @default(cuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  community   Community             @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  name        String
  conditions  RoleCondition[]
  permissions RolePermission[]
  members     CommunityMemberRole[]
  logs        Log[]
  snapshots   Snapshot[]
}

model RoleCondition {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  type      NetworkTokenType
  amount    String           @default("0") // TODO: V3: rename to amountMin
  amountMax String           @default("0")
  config    Json?
  filters   Json?
  token     NetworkToken     @relation(fields: [tokenId], references: [id])
  tokenId   String
  role      Role             @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
}

model RolePermission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  botRole   BotRole? @relation(fields: [botRoleId], references: [id], onDelete: Cascade)
  botRoleId String?

  @@unique([roleId, botRoleId])
}

model Snapshot {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  name      String
  data      Json
}

model Team {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  community   Community         @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  identity    Identity          @relation(fields: [identityId], references: [id], onDelete: Cascade)
  identityId  String
  name        String
  avatarUrl   String?
  members     CommunityMember[]

  @@unique([communityId, identityId])
  @@unique([communityId, name])
}

model User {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  lastLogin   DateTime?
  avatarUrl   String?
  developer   Boolean           @default(false)
  name        String?
  role        UserRole          @default(User)
  status      UserStatus        @default(Created)
  username    String            @unique
  communities CommunityMember[]
  identities  Identity[]
  logs        Log[]
}

enum BotStatus {
  Active
  Inactive
}

enum CommunityRole {
  Admin
  Member
}

enum IdentityProvider {
  Discord
  Solana
}

enum LogLevel {
  Error
  Info
  Verbose
  Warning
}

enum LogRelatedType {
  Bot
  BotMember
  Community
  Identity
  Role
  User
}

enum NetworkCluster {
  SolanaCustom
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

enum NetworkResolver {
  Anybodies
  SolanaFungible
  SolanaNonFungible
}

enum NetworkTokenType {
  Fungible
  NonFungible
}

enum NetworkType {
  Solana
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}
